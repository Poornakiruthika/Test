{
  "_args": [
    [
      {
        "raw": "@request/core@0.1.0",
        "scope": "@request",
        "escapedName": "@request%2fcore",
        "name": "@request/core",
        "rawSpec": "0.1.0",
        "spec": "0.1.0",
        "type": "version"
      },
      "D:\\dev\\nightwatch\\node_modules\\nightwatch\\node_modules\\@request\\client"
    ]
  ],
  "_from": "@request/core@0.1.0",
  "_id": "@request/core@0.1.0",
  "_inCache": true,
  "_location": "/@request/core",
  "_nodeVersion": "5.0.0",
  "_npmUser": {
    "name": "request",
    "email": "request.js@gmail.com"
  },
  "_npmVersion": "3.3.12",
  "_phantomChildren": {
    "core-util-is": "1.0.2",
    "inherits": "2.0.3",
    "isarray": "1.0.0",
    "process-nextick-args": "1.0.7",
    "util-deprecate": "1.0.2"
  },
  "_requested": {
    "raw": "@request/core@0.1.0",
    "scope": "@request",
    "escapedName": "@request%2fcore",
    "name": "@request/core",
    "rawSpec": "0.1.0",
    "spec": "0.1.0",
    "type": "version"
  },
  "_requiredBy": [
    "/@request/client"
  ],
  "_resolved": "https://registry.npmjs.org/@request/core/-/core-0.1.0.tgz",
  "_shasum": "8e3b66f18c90747912dd7660e89a9cb55849f9f9",
  "_shrinkwrap": null,
  "_spec": "@request/core@0.1.0",
  "_where": "D:\\dev\\nightwatch\\node_modules\\nightwatch\\node_modules\\@request\\client",
  "author": {
    "name": "Simeon Velichkov",
    "email": "simeonvelichkov@gmail.com",
    "url": "http://simov.github.io"
  },
  "bugs": {
    "url": "https://github.com/request/core/issues"
  },
  "dependencies": {
    "@request/headers": "0.1.0",
    "@request/length": "0.1.0",
    "@request/qs": "0.1.0",
    "bl": "1.0.0",
    "deep-copy": "1.1.0",
    "isstream": "0.1.2",
    "json-stringify-safe": "5.0.1",
    "mime-types": "2.1.7"
  },
  "description": "HTTP Client Library",
  "devDependencies": {
    "@request/digest": "0.1.0",
    "aws-sign2": "0.6.0",
    "formidable": "1.0.17",
    "hawk": "4.0.0",
    "http-auth": "2.2.8",
    "http-signature": "1.0.2",
    "iconv-lite": "0.4.13",
    "mocha": "2.3.3",
    "oauth-sign": "0.8.0",
    "should": "7.1.0",
    "tough-cookie": "2.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "8e3b66f18c90747912dd7660e89a9cb55849f9f9",
    "tarball": "https://registry.npmjs.org/@request/core/-/core-0.1.0.tgz"
  },
  "files": [
    "config/",
    "lib/",
    "LICENSE",
    "README.md",
    "index.js"
  ],
  "gitHead": "3ba0f5cc1d0dd1239b3c6e0476093faaa15c3e53",
  "homepage": "https://github.com/request/core",
  "keywords": [
    "request",
    "http",
    "https",
    "client",
    "request"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "request",
      "email": "request.js@gmail.com"
    }
  ],
  "name": "@request/core",
  "optionalDependencies": {},
  "readme": "\n# @request/core\n\nHTTP Duplex Streams2 client. By default it behaves identically to Node's Core [http.request][node-http-request] method.\n\nEach additional feature must be enabled explicitly via option. Some options requires additional dependencies.\n\n\n---\n\n\n# Options\n\n\n## URL\n\n#### url/uri\n  - `String`\n  - `url.Url`\n\n#### qs\n  - `Object`\n  - `String`\n\n## Body\n\n#### form\n  - `Object`\n  - `String` pass URL encoded string if you want it to be RFC3986 encoded prior sending\n\n#### json\n  - `Object`\n\n#### body\n  - `Stream`\n  - `Buffer`\n  - `String`\n  - `Array`\n\n#### multipart - requires [@request/multipart][request-multipart]\n\nPass `Object` for `multipart/form-data` body:\n\n```js\n// set item\nmultipart: {photo: fs.createReadStream('cat.png')}\n// pass additional info about the uploaded item\nmultipart: {\n  photo: {\n    value: fs.createReadStream('cat.png'),\n    options: {filename: 'cat.png', contentType: 'image/png', knownLength: 22025}\n  }\n}\n// pass array of values for this item\nmultipart: {attachments: [fs.createReadStream('cat.png'), fs.createReadStream('dog.png')]}\n```\n\nThe item's value can be either: `Stream`, `Request`, `Buffer` or `String`.\n\nPass `Array` for any other `multipart/[TYPE]`, defaults to `multipart/related`:\n\n```js\n// Example: Upload image to Google Drive\nmultipart: [\n  {\n    'Content-Type': 'application/json',\n    body: JSON.stringify({title: 'cat.png'})\n  },\n  {\n    'Content-Type': 'image/png',\n    body: fs.createReadStream('cat.png')\n  }\n]\n```\n\nThe `body` key is required and reserved for setting up the item's body. It can be either: `Stream`, `Request`, `Buffer` or `String`.\n\nAdditionally you can set `preambleCRLF` and/or `postambleCRLF` to `true`.\n\n\n## Authentication\n\n#### auth - digest auth requires [@request/digest][request-digest]\n- `{user: '', pass: '', sendImmediately: false}`\n  - Sets the `Authorization: Basic ...` header.\n  - The `sendImmediately` option default to `true` if omitted.\n  - The `sendImmediately: false` options requires the [redirect option][redirect-option] to be enabled.\n  - Digest authentication requires the [@request/digest][request-digest] module.\n- `{bearer: '', sendImmediately: false}`\n  - Alternatively the `Authorization: Bearer ...` header can be set if using the `bearer` option.\n  - The rules for the `sendImmediately` option from above applies here.\n\n\n#### oauth - requires [@request/oauth][request-oauth]\n\n#### hawk - requires [hawk][hawk]\n\n#### httpSignature - requires [http-signature][http-signature]\n\n#### aws - requires [aws-sign2][aws-sign2]\n\n\n## Modifiers\n\n#### gzip\n- `gzip: true`\n  - Pipes the response body to [zlib][zlib] Inflate or Gunzip stream based on the compression method specified in the `content-encoding` response header.\n- `gzip: 'gzip'` | `gzip: 'deflate'`\n  - Explicitly specify which decompression method to use.\n\n#### encoding - requires [iconv-lite][iconv-lite]\n- `encoding: true`\n  - Pipes the response body to [iconv-lite][iconv-lite] stream, defaults to `utf8`.\n- `encoding: 'ISO-8859-1'` | `encoding: 'win1251'` | ...\n  - Specific encoding to use.\n- `encoding: 'binary'`\n  - Set `encoding` to `'binary'` when expecting binary response.\n\n\n## Misc\n\n#### cookie - requires [tough-cookie][tough-cookie]\n  - `true`\n  - `new require('tough-cookie).CookieJar(store, options)`\n\n#### length\n  - `true` defaults to `false` if omitted\n\n#### callback\n  buffers the response body\n  - `function(err, res, body)` by default the response buffer is decoded into string using `utf8`. Set the `encoding` property to `binary` if you expect binary data, or any other specific encoding\n\n#### redirect\n  - `true` follow redirects for `GET`, `HEAD`, `OPTIONS` and `TRACE` requests\n  - `Object`\n    - *all* follow all redirects\n    - *max* maximum redirects allowed\n    - *removeReferer* remove the `referer` header on redirect\n    - *allow* `function (res)` user defined function to check if the redirect should be allowed\n\n#### timeout\n  - `Number` integer containing the number of milliseconds to wait for a server to send response headers (and start the response body) before aborting the request. Note that if the underlying TCP connection cannot be established, the OS-wide TCP connection timeout will overrule the timeout option\n\n#### proxy\n  - `String`\n  - `url.Url`\n  - `Object`\n\n```js\n{\n  proxy: 'http://localhost:6767'\n  //\n  proxy: url.parse('http://localhost:6767')\n  //\n  proxy: {\n    url: 'http://localhost:6767',\n    headers: {\n      allow: ['header-name'],\n      exclusive: ['header-name']\n    }\n  }\n}\n```\n\n#### tunnel - requires [tunnel-agent][tunnel-agent]\n  - `true`\n\n#### parse\n  - `{json: true}`\n    - sets the `accept: application/json` header for the request\n    - parses `JSON` or `JSONP` response bodies (only if the server responds with the approprite headers)\n  - `{json: function () {}}`\n    - same as above but additionally passes a user defined reviver function to the `JSON.parse` method\n  - `{qs: {sep:';', eq:':'}}`\n    - `qs.parse` options to use\n  - `{querystring: {sep:';', eq:':', options: {}}}` use the [querystring][node-querystring] module instead\n    - `querystring.parse` options to use\n\n#### stringify\n  - `{qs: {sep:';', eq:':'}}`\n    - `qs.stringify` options to use\n  - `{querystring: {sep:';', eq:':', options: {}}}` use the [querystring][node-querystring] module instead\n    - `querystring.stringify` options to use\n\n#### end\n  - `true` tries to automatically end the request on `nextTick`\n\n\n---\n\n\n# HTTPDuplex\n\n###### Private Flags and State\n\n- `_initialized` set when the outgoing HTTP request is fully initialized\n- `_started` set after first write/end\n- `_req` http.ClientRequest created in HTTPDuplex\n- `_res` http.IncomingMessage created in HTTPDuplex\n- `_client` http or https module\n- `_redirect` boolean indicating that the client is going to be redirected\n- `_redirected` boolean indicating that the client is been redirected at least once\n- `_src` the input read stream, usually from pipe\n- `_chunks` Array - the first chunk read from the input read stream\n- `_ended` whether the outgoing request has ended\n- `_auth` whether basic auth is being used\n- `_timeout` timeout timer instance\n\n\n###### Public Methods\n\n  - `init`\n  - `abort`\n\n\n---\n\n# Request\n\n## Methods\n\n- **Request** the HTTPDuplex child class\n\n## Events\n\n- **init** should be private I guess\n- **request** req, options\n- **onresponse** res - internal event to execute options response logic\n- **redirect** res\n- **response** res\n- **options** emit [@request/core][request-core] options\n- **body** emit raw response body, either `Buffer` or `String` (the `callback` option is required)\n- **json** emit parsed JSON response body (the `callback` and the `parse:{json:true}` options are required)\n\n## req/res\n\n- **headers** is instance of the [@request/headers][request-headers] module\n\n\n---\n\n\n## Generated Options\n\n- **url** contains the parsed URL\n- **redirect** is converted to object containing all possible options including the `followed` state variable, containing the followed redirects count\n- **auth** containes `sent` state variable indicating whether the Basic auth is sent already\n- **cookie** is converted to object and containes the initial cookie `header` as a property\n- **jar** the internal [tough-cookie][tough-cookie] jar\n\n\n---\n\n\n## Logger\n\nRequires [@request/log][request-log]\n\n- **req** prints out the request `method`, `url`, and `headers`\n- **res** prints out the response `statusCode`, `statusMessage`, and `headers`\n- **http** prints out the options object passed to the underlying `http.request` method\n- **raw** prints out the raw `@request/core` options object right before sending the request\n- **body** prints out the raw request and response bodies (the response body is available only when the `callback` option is being used)\n- **json** prints out the parsed JSON response body (only if the response body is a JSON one, and if the `callback` and `parse.json` options are being used)\n\n```bash\n$ DEBUG=req,res node app.js\n```\n\n---\n\n\n## Errors\n\n###### oauth\n\n- `oauth: transport_method: body requires method: POST and content-type: application/x-www-form-urlencoded`\n- `oauth: signature_method: PLAINTEXT not supported with body_hash signing`\n\n\n---\n\n\n## Notice\n\nThis module may contain code snippets initially implemented in [request][request] by [request contributors][request-contributors].\n\n\n  [request]: https://github.com/request/request\n  [request-contributors]: https://github.com/request/request/graphs/contributors\n  [zlib]: https://iojs.org/api/zlib.html\n  [node-http-request]: https://nodejs.org/api/http.html#http_http_request_options_callback\n\n  [tough-cookie]: https://github.com/SalesforceEng/tough-cookie\n  [iconv-lite]: https://www.npmjs.com/package/iconv-lite\n  [hawk]: https://github.com/hueniverse/hawk\n  [aws-sign2]: https://github.com/request/aws-sign\n  [http-signature]: https://github.com/joyent/node-http-signature\n  [tunnel-agent]: https://github.com/mikeal/tunnel-agent\n\n  [request-core]: https://github.com/request/core\n  [request-headers]: https://github.com/request/headers\n  [request-digest]: https://github.com/request/digest\n  [request-oauth]: https://github.com/request/oauth\n  [request-multipart]: https://github.com/request/multipart\n  [request-log]: https://github.com/request/log\n\n  [redirect-option]: #redirect\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/request/core.git"
  },
  "scripts": {
    "lint": "eslint . && echo Lint passed",
    "test": "npm run lint && npm run test-ci",
    "test-ci": "mocha --recursive test/",
    "test-cov": "istanbul cover _mocha test/"
  },
  "version": "0.1.0"
}
