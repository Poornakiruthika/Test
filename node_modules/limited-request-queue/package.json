{
  "_args": [
    [
      {
        "raw": "limited-request-queue@^2.0.0",
        "scope": null,
        "escapedName": "limited-request-queue",
        "name": "limited-request-queue",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "D:\\dev\\nightwatch\\node_modules\\nightwatch\\node_modules\\broken-link-checker"
    ]
  ],
  "_from": "limited-request-queue@>=2.0.0 <3.0.0",
  "_id": "limited-request-queue@2.0.0",
  "_inCache": true,
  "_location": "/limited-request-queue",
  "_nodeVersion": "5.2.0",
  "_npmUser": {
    "name": "stevenvachon",
    "email": "contact@svachon.com"
  },
  "_npmVersion": "3.3.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "limited-request-queue@^2.0.0",
    "scope": null,
    "escapedName": "limited-request-queue",
    "name": "limited-request-queue",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/broken-link-checker"
  ],
  "_resolved": "https://registry.npmjs.org/limited-request-queue/-/limited-request-queue-2.0.0.tgz",
  "_shasum": "14c7c120b138060b19a2a1030abaf6693572650d",
  "_shrinkwrap": null,
  "_spec": "limited-request-queue@^2.0.0",
  "_where": "D:\\dev\\nightwatch\\node_modules\\nightwatch\\node_modules\\broken-link-checker",
  "author": {
    "name": "Steven Vachon",
    "email": "contact@svachon.com",
    "url": "http://www.svachon.com/"
  },
  "bugs": {
    "url": "https://github.com/stevenvachon/limited-request-queue/issues"
  },
  "dependencies": {
    "is-browser": "^2.0.1",
    "parse-domain": "~0.2.0"
  },
  "description": "Interactively manage concurrency for outgoing requests.",
  "devDependencies": {
    "browserify": "^12.0.1",
    "chai": "^3.4.1",
    "mocha": "^2.3.4",
    "mocha-phantomjs": "4.0.1",
    "object.assign": "^4.0.3",
    "phantomjs": "1.9.19",
    "uglify-js": "^2.6.1",
    "url-parse": "^1.0.5"
  },
  "directories": {},
  "dist": {
    "shasum": "14c7c120b138060b19a2a1030abaf6693572650d",
    "tarball": "https://registry.npmjs.org/limited-request-queue/-/limited-request-queue-2.0.0.tgz"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "files": [
    "lib",
    "license"
  ],
  "gitHead": "96e1bc1b3946bfffb8977038f39e4a66a5a4cd38",
  "homepage": "https://github.com/stevenvachon/limited-request-queue",
  "keywords": [
    "background",
    "concurrency",
    "ddos",
    "http",
    "limiting",
    "queue",
    "rate",
    "request",
    "throttle"
  ],
  "license": "MIT",
  "main": "lib",
  "maintainers": [
    {
      "name": "stevenvachon",
      "email": "contact@svachon.com"
    }
  ],
  "name": "limited-request-queue",
  "optionalDependencies": {},
  "readme": "# limited-request-queue [![NPM Version][npm-image]][npm-url] [![Bower Version][bower-image]][bower-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][david-image]][david-url]\n\n> Interactively manage concurrency for outgoing requests.\n\nFeatures:\n* Concurrency & rate limiting prevents overload on your server\n* Per-Host concurrency limiting prevents overload on everyone else's server\n* Pause/Resume at any time\n* Works in the browser (~6.5KB)\n\n```js\n// Will work with any similar module, not just \"request\"\nvar request = require(\"request\");\nvar RequestQueue = require(\"limited-request-queue\");\n\nvar queue = new RequestQueue(null, {\n\titem: function(input, done) {\n\t\trequest(input.url, function(error, response) {\n\t\t\tdone();\n\t\t});\n\t},\n\tend: function() {\n\t\tconsole.log(\"Queue completed!\");\n\t}\n});\n\nvar urls = [\"http://website.com/dir1/\", \"http://website.com/dir2/\"];\nurls.forEach(queue.enqueue, queue);\n\nsetTimeout(queue.pause, 500);\nsetTimeout(queue.resume, 5000);\n```\n\n\n## Installation\n\n[Node.js](http://nodejs.org/) `>= 0.10` is required; `< 4.0` will need an `Object.assign` polyfill. To install, type this at the command line:\n```shell\nnpm install limited-request-queue --save-dev\n```\n\n\n## Constructor\n```js\nnew RequestQueue(options, handlers);\n```\n\n\n## Methods\n\n### .dequeue(id)\nRemoves a queue item from the queue. Use of this function is likely not needed as items are auto-dequeued when their turn is reached. Returns `true` on success or an `Error` on failure.\n\n### .enqueue(input)\nAdds a URL to the queue. `input` can either be a URL `String` or an `Object`. Returns a queue ID on success or an `Error` on failure.\n\nIf `input` is an `Object`, it will acccept the following keys:\n\n* `url`: a URL `String` or [`url.parse()`](https://nodejs.org/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost)-compatible `Object`.\n* `data`: additional data to be stored in the queue item.\n* `id`: a unique ID (`String` or `Number`). If not defined, one will be generated.\n\n### .length()\nReturns the total number of items in the queue, active and non-active.\n\n### .numActive()\nReturns the number of items whose requests are currently in progress.\n\n### .numQueued()\nReturns the number of items that have not yet made requests.\n\n### .pause()\nPauses the queue, but will not pause any active requests.\n\n### .resume()\nResumes the queue.\n\n\n## Options\n\n### options.ignorePorts\nType: `Boolean`  \nDefault value: `true`  \nWhether or not to treat identical hosts of different ports as a single concurrent group. **Example:** when `true`, http://mywebsite.com:80 and http://mywebsite.com:8080 may not have outgoing connections at the same time, but http://mywebsite.com:80 and http://yourwebsite.com:8080 will.\n\n### options.ignoreSchemes\nType: `Boolean`  \nDefault value: `true`  \nWhether or not to treat identical hosts of different schemes/protocols as a single concurrent group. **Example:** when `true`, http://mywebsite.com and https://mywebsite.com may not have outgoing connections at the same time, but http://mywebsite.com and https://yourwebsite.com will.\n\n### options.ignoreSubdomains\nType: `Boolean`  \nDefault value: `true`  \nWhether or not to treat identical hosts of different subdomains as a single concurrent group. **Example:** when `true`, http://mywebsite.com and http://www.mywebsite.com may not have outgoing connections at the same time, but http://mywebsite.com and http://www.yourwebsite.com will.\n\nThis option is not available in the browser version (due to extreme file size).\n\n### options.maxSockets\nType: `Number`  \nDefault value: `Infinity`  \nThe maximum number of connections allowed at any given time. A value of `0` will prevent anything from going out. A value of `Infinity` will provide no concurrency limiting.\n\n### options.maxSocketsPerHost\nType: `Number`  \nDefault value: `1`  \nThe maximum number of connections per host allowed at any given time. A value of `0` will prevent anything from going out. A value of `Infinity` will provide no per-host concurrency limiting.\n\n### options.rateLimit\nType: `Number`  \nDefault value: `0`  \nThe number of milliseconds to wait before each request. For a typical rate limiter, also set `maxSockets` to `1`.\n\n\n## Handlers\n\n### handlers.end\nCalled when the last item in the queue has been completed.\n\n### handlers.item\nCalled when a queue item's turn has been reached. Arguments are: `input`, `done`.\n\n\n[npm-image]: https://img.shields.io/npm/v/limited-request-queue.svg\n[npm-url]: https://npmjs.org/package/limited-request-queue\n[bower-image]: https://img.shields.io/bower/v/limited-request-queue.svg\n[bower-url]: https://github.com/stevenvachon/limited-request-queue\n[travis-image]: https://img.shields.io/travis/stevenvachon/limited-request-queue.svg\n[travis-url]: https://travis-ci.org/stevenvachon/limited-request-queue\n[david-image]: https://img.shields.io/david/stevenvachon/limited-request-queue.svg\n[david-url]: https://david-dm.org/stevenvachon/limited-request-queue\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/stevenvachon/limited-request-queue.git"
  },
  "scripts": {
    "browserify": "browserify lib/ --exclude parse-domain --exclude url --standalone RequestQueue | uglifyjs --compress --mangle -o browser/requestqueue.js",
    "test": "npm run test_server && npm run test_browser",
    "test_browser": "npm run browserify && mocha-phantomjs test/browser.html",
    "test_server": "mocha test/server/ --reporter spec --check-leaks --bail"
  },
  "version": "2.0.0"
}
