{
  "_args": [
    [
      {
        "raw": "cronshot",
        "scope": null,
        "escapedName": "cronshot",
        "name": "cronshot",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\dev\\nightwatch\\node_modules\\nightwatch"
    ]
  ],
  "_from": "cronshot@latest",
  "_id": "cronshot@0.1.0",
  "_inCache": true,
  "_location": "/cronshot",
  "_npmUser": {
    "name": "gfranko",
    "email": "gregfranko5@gmail.com"
  },
  "_npmVersion": "1.4.28",
  "_phantomChildren": {
    "graceful-fs": "3.0.11",
    "phantomjs": "1.9.20",
    "tmp": "0.0.31"
  },
  "_requested": {
    "raw": "cronshot",
    "scope": null,
    "escapedName": "cronshot",
    "name": "cronshot",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/cronshot/-/cronshot-0.1.0.tgz",
  "_shasum": "af2f801bd2d42bcca41cf95996e618f8da744698",
  "_shrinkwrap": null,
  "_spec": "cronshot",
  "_where": "D:\\dev\\nightwatch\\node_modules\\nightwatch",
  "bugs": {
    "url": "https://github.com/yahoo/cronshot/issues"
  },
  "contributors": [
    {
      "name": "Greg Franko"
    },
    {
      "name": "Chase West"
    },
    {
      "name": "Kevin Ku"
    },
    {
      "name": "Akshay Patel"
    }
  ],
  "dependencies": {
    "async": "^0.9.0",
    "colors": "^0.6.2",
    "cron": "^1.0.4",
    "webshot": "^0.15.2"
  },
  "description": "Cron job scheduler to take, alter, and store web page screenshots",
  "devDependencies": {
    "chai": "1.x",
    "cronshot-local": "^0.1.5",
    "istanbul": "0.x",
    "mocha": "1.x",
    "mockery": "1.x"
  },
  "directories": {},
  "dist": {
    "shasum": "af2f801bd2d42bcca41cf95996e618f8da744698",
    "tarball": "https://registry.npmjs.org/cronshot/-/cronshot-0.1.0.tgz"
  },
  "engines": {
    "node": "~0.10.0"
  },
  "gitHead": "330b40d7bb1c88f55ec5b91a095c84a41e31f1bf",
  "homepage": "https://github.com/yahoo/cronshot#readme",
  "keywords": [
    "cron",
    "screenshot"
  ],
  "main": "./src/index.js",
  "maintainers": [
    {
      "name": "gfranko",
      "email": "gregfranko5@gmail.com"
    }
  ],
  "name": "cronshot",
  "optionalDependencies": {},
  "readme": "CronShot\n========\n\nNode module that allows you to schedule, take, alter, and store web page screenshots\n\n`npm install cronshot`\n\n## How\n\nCronShot uses:\n\n- [node-webshot](https://github.com/brenden/node-webshot) to take screenshots using [Phantom JS](https://github.com/ariya/phantomjs)\n\n- [node-cron](https://github.com/ncb000gt/node-cron) to schedule screenshots\n\n- [async](https://github.com/caolan/async) to allow more than one screenshot cron job to be run in parallel\n\n\n## Setup\n\n* **Install PhantomJS**\n - Make sure you have [homebrew](http://brew.sh/) installed: `ruby -e \"$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)\"`\n\n - Install PhantomJS: `brew update && brew install phantomjs`\n\n* **Install CronShot**\n - `npm install cronshot`\n\n* **Install/Create any CronShot [middleware functions](#save-middleware) that you want**\n\n* **Run CronShot using one of the examples below**\n\n\n## Examples\n\n**Take and Save An Image To The Local Filesystem One Time**\n\n`npm install cronshot-local`\n\n```javascript\nvar cronshot = require('cronshot'),\n  middleware = {\n    'local': require('cronshot-local')\n  };\n\n// Local File Example\n// ------------------\n\n// Takes a screenshot of sports.yahoo.com,\n// and saves the screenshot to the local file system\n\n// Save Local File Example\ncronshot.startCapturing({\n  // The webpage URL that you would like to take a screenshot of\n  'url': 'http://sports.yahoo.com',\n  // The local path where you would like to save the image\n  'path': __dirname,\n  // Only takes one screenshot\n  'cronPattern': false,\n  // What middleware functions to use each time a screenshot is taken\n  'saveMiddleware': [middleware.local]\n}, function(err) {\n  // optional callback function once all screenshots have been taken\n  if (err) {\n      console.error(err);\n  }\n});\n```\n\n**Take and Save a Transparent Screenshot**\n\n`npm install cronshot-imagemagick`\n\n`brew update && brew install imagemagick`\n\n```javascript\nvar cronshot = require('cronshot'),\n  middleware = {\n    'imagemagick': require('cronshot-imagemagick')\n  };\n\n// Image Magick Example\n// --------------------\n\n// Takes a screenshot of sports.yahoo.com,\n// and converts the screenshot to be a transparent image using Image Magick\n\n// Image Magick example\ncronshot.startCapturing({\n  // The webpage URL that you would like to take a screenshot of\n  'url': 'http://sports.yahoo.com',\n  // The local path where you would like to save the image\n  'path': __dirname,\n  // Only takes one screenshot\n  'cronPattern': false,\n  // What middleware functions to use each time a screenshot is taken\n  'saveMiddleware': [{\n    // Function that does all the Image Magick stuff\n    'middleware': middleware.imagemagick,\n    'options': {\n      'gmCommands': [{\n        'method': 'trim',\n        'args': []\n      }, {\n        'method': 'transparent',\n        'args': ['#FFFFFF']\n      }]\n    }\n  }]\n}, function(err) {\n  // optional callback function once all screenshots have been taken\n});\n```\n\n**Take and Save A Screenshot To The Local Filesystem Every 10 seconds**\n\n`npm install cronshot-local`\n\n```javascript\nvar cronshot = require('cronshot'),\n  middleware = {\n    'local': require('cronshot-local')\n  };\n\n// Local File Example\n// ------------------\n\n// Takes a screenshot of sports.yahoo.com,\n// and saves the screenshot to the local file system\n\n// Save Local File Example\ncronshot.startCapturing({\n  // The webpage URL that you would like to take a screenshot of\n  'url': 'http://sports.yahoo.com',\n  // The local path where you would like to save the image\n  'path': __dirname,\n  // Cron pattern to run every 10 seconds\n  'cronPattern': '*/10 * * * * *',\n  // What middleware functions to use each time a screenshot is taken\n  'saveMiddleware': [middleware.local],\n}, function(err) {\n  // optional callback function once all screenshots have been taken\n  if (err) {\n      console.error(err);\n  }\n});\n```\n\n**Run One Or More Cron Jobs In Parallel**\n\n`npm install cronshot-local`\n\n```javascript\nvar cronshot = require('cronshot'),\n  middleware = {\n    'local': require('cronshot-local')\n  };\n\n// Takes a screenshot of sports.yahoo.com and yahoo.com,\n// and saves both screenshots in the current local directory\ncronshot.startCapturing({\n  'parallelLimit': 2,\n  'screenshots': [{\n    // The webpage URL that you would like to take a screenshot of\n    'url': 'http://sports.yahoo.com',\n    // The local path where you would like to save the image\n    'path': __dirname,\n    // The desired name of the image (the default is screenshot.png)\n    'imageName': 'screenshot.png',\n    // What middleware functions to use each time a screenshot is taken\n    'saveMiddleware': [middleware.local]\n  }, {\n    // The webpage URL that you would like to take a screenshot of\n    'url': 'http://yahoo.com',\n    // The local path where you would like to save the image\n    'path': __dirname,\n    // The desired name of the image (the default is screenshot.png)\n    'imageName': 'screenshot1.png',\n    // What middleware functions to use each time a screenshot is taken\n    'saveMiddleware': [middleware.local]\n  }]\n}, function(err) {\n  // optional callback function once all screenshots have been taken\n  if (err) {\n      console.error(err);\n  }\n});\n```\n\n**Passing Options via Command Line**\n\n`node cronshot-runner.js --customCSS 'body { background: blue !important; }' --url 'http://yahoo.com'`\n\n**Note:** You can pass BOTH **code options** AND **command line options**. If you pass the same option via both methods, the command line option takes precedence.\n\n## Save Middleware\n\nThe `saveMiddleware` option accepts one or more functions, that are run serially (in order), to manipulate/save a screenshot image.\n\n### Available Save Middleware\n\nBelow are the current middleware functions available:\n\n[cronshot-local](https://github.com/yahoo/cronshot-local) - Cronshot middleware to save images locally\n\n[cronshot-imagemagick](https://github.com/yahoo/cronshot-imagemagick) - Cronshot middleware to manipulate and save images with ImageMagick\n\n\n### Writing Your Own Save Middleware\n\n### Best Practices\n\n* Should be small (~100 or less of code)\n\n* Should do one thing (eg. save to filesystem, manipulate image, save to cdn)\n\n* Should call a callback function when completed\n\n\n### Example\n\n```javascript\nmodule.exports = function(obj, callback) {\n    var options = obj.options,\n        content = obj.readStream,\n        info = {\n            'name': 'example-middleware'\n        },\n        error = false;\n\n    callback(error, info);\n}\n```\n\n\n### Review\n\nSave middleware functions are only provided three things; the **user options**, the **screenshot read stream**, and the **callback function** to call when all actions are completed.  Please make sure to pass an `info` object, with the name of the middleware, to the callback function.  \n\n\n## Options\n\n```javascript\n// The time to fire off your job. This can be in the form of cron syntax or a JS Date object.\n// The default runs every 10 seconds\n// If you set this to false, then CronShot will only take one screen shot\n'cronPattern': '*/10 * * * * *',\n// The webpage URL that you would like to take a screenshot of\n'url': '',\n// The name of the image you would like to be saved\n'imageName': 'screenshot.png',\n// The local path where you would like to save the image\n'path': '',\n// User agent to use when creating the screenshot\n'userAgent': '',\n// The dimensions of the browser window\n'screenSize': {\n  'width': 1024,\n  'height': 768\n},\n//The area of the page document, starting at the upper left corner, to render.\n// Possible values are 'screen', 'all', and a number defining a pixel length.\n// 'window' causes the length to be set to the length of the window\n// (i.e. the shot displays what is initially visible within the browser window). \n// 'all' causes the length to be set to the length of the document along the given dimension.\n'shotSize': {\n  'width': 'window',\n  'height': 'window'\n},\n// The left and top offsets define the upper left corner of the screenshot rectangle.\n// The right and bottom offsets allow pixels to be removed from the shotSize dimensions\n// (e.g. a shotSize height of 'all' with a bottom offset of 30 would cause all but the\n// last 30 rows of pixels on the site to be rendered).\n'shotOffset': {\n  'left': 0,\n  'right': 0,\n  'top': 0,\n  'bottom': 0\n},\n// The location of phantomjs.\n// Webshot tries to use the binary provided by the phantomjs NPM module,\n// and falls back to 'phantomjs' if the module isn't available.\n'phantomPath': 'phantomjs',\n// Object with key value pairs corresponding to phantomjs command line options.\n'phantomConfig': {},\n// Any additional headers to be sent in the HTTP request.\n'customHeaders': null,\n// When taking the screenshot, adds a white background if not defined elsewhere\n'defaultWhiteBackground': true,\n// When taking the screenshot, adds custom CSS rules if defined\n'customCSS': '',\n// JPEG compression quality.\n// A higher number will look better, but creates a larger file.\n// Quality setting has no effect when streaming.\n'quality': 75,\n// If streaming is used, this designates the file format of the streamed rendering.\n// Possible values are 'png', 'jpg', and 'jpeg'.\n'streamType': 'png',\n// Indicates whether the content needs to be requested ('url'),\n// loaded locally ('file'),\n// or is being provided directly as a string ('html').\n'siteType': 'url',\n// Number of milliseconds to wait after a page loads before taking the screenshot.\n'renderDelay': 0,\n// Number of milliseconds to wait before killing the phantomjs process and assuming\n// webshotting has failed. (0 is no timeout.)\n'timeout': 0,\n// Wait for the web page to signal to webshot when to take the photo using\n// window.callPhantom('takeShot');\n'takeShotOnCallback': false,\n// If the loaded page has a non-200 status code, don't take a screenshot, cause an error instead.\n'errorIfStatusIsNot200': false,\n// If you set this to true, then CronShot will not print out any success/error logs\n'silent': false,\n// The maximum number of times you would like your screenshot cron job to run\n'max': false,\n// The maximum number of screenshot cron jobs to run in parallel\n// Note: This only applies if you are running more than one screenshot cron jobs\n'parallelLimit': 5\n```\n\n## Contributing\n\nPlease send all PR's to the `dev` branch.\n\nIf your PR is a code change:\n\n1.  Install all node.js dev dependencies: `npm install`\n2.  Update the appropriate module inside of the `src/modules` directory.\n3.  Add a unit test inside of `tests/unit/cronshot.js`.\n4.  Verify that all tests are passing by running `npm test`.\n5.  Send the PR!\n\n\n## Credits\n\ncronshot.js would not have been possible without the help/inspiration of the following libraries/awesome people:\n\n - [Brenden Kokoszka](https://github.com/brenden)'s [node-webshot](https://github.com/brenden/node-webshot)\n  * Takes screenshots using [Phantom JS](https://github.com/ariya/phantomjs)\n  * Copyright (c) Brenden Kokoszka, 2012 -  [MIT License](https://github.com/brenden/node-webshot#license)\n\n - [Nick Campbell](https://github.com/ncb000gt)'s [node-cron](https://github.com/ncb000gt/node-cron)\n  * Schedules cron jobs\n  * Copyright (c) Brenden Kokoszka, 2010 -  [MIT License](https://github.com/ncb000gt/node-cron#license)\n\n - [Caolan McMahon](https://github.com/caolan)'s [async](https://github.com/caolan/async)\n  * Async utilities for node and the browser\n  * Copyright (c) Caolan McMahon, 2010-2014 -  [MIT License](https://github.com/caolan/async/blob/master/LICENSE)\n\n\n## Contributors\n\n- [Greg Franko](https://github.com/gfranko)\n- [Chase West](https://github.com/ChaseWest)\n- [Akshay Patel](https://github.com/akshayp)\n- [Kevin Ku](https://github.com/kku1993)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/yahoo/cronshot.git"
  },
  "scripts": {
    "test": "node node_modules/istanbul/lib/cli.js cover --dir artifacts -- ./node_modules/mocha/bin/_mocha tests/unit/* --recursive --reporter spec"
  },
  "version": "0.1.0",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": "~0.10.0"
      },
      "pkgid": "cronshot@0.1.0"
    },
    {
      "code": "ENOTSUP",
      "required": {
        "node": "~0.10.0"
      },
      "pkgid": "cronshot@0.1.0"
    }
  ]
}
