{
  "_args": [
    [
      {
        "raw": "robot-directives@~0.3.0",
        "scope": null,
        "escapedName": "robot-directives",
        "name": "robot-directives",
        "rawSpec": "~0.3.0",
        "spec": ">=0.3.0 <0.4.0",
        "type": "range"
      },
      "D:\\dev\\nightwatch\\node_modules\\nightwatch\\node_modules\\broken-link-checker"
    ]
  ],
  "_from": "robot-directives@>=0.3.0 <0.4.0",
  "_id": "robot-directives@0.3.0",
  "_inCache": true,
  "_location": "/robot-directives",
  "_nodeVersion": "5.5.0",
  "_npmUser": {
    "name": "stevenvachon",
    "email": "contact@svachon.com"
  },
  "_npmVersion": "3.3.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "robot-directives@~0.3.0",
    "scope": null,
    "escapedName": "robot-directives",
    "name": "robot-directives",
    "rawSpec": "~0.3.0",
    "spec": ">=0.3.0 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/broken-link-checker"
  ],
  "_resolved": "https://registry.npmjs.org/robot-directives/-/robot-directives-0.3.0.tgz",
  "_shasum": "174fb1ffc2a9b97877301e87c89b395f429d1f65",
  "_shrinkwrap": null,
  "_spec": "robot-directives@~0.3.0",
  "_where": "D:\\dev\\nightwatch\\node_modules\\nightwatch\\node_modules\\broken-link-checker",
  "author": {
    "name": "Steven Vachon",
    "email": "contact@svachon.com",
    "url": "http://www.svachon.com/"
  },
  "bugs": {
    "url": "https://github.com/stevenvachon/robot-directives/issues"
  },
  "dependencies": {
    "isbot": "^2.0.0",
    "useragent": "^2.1.8"
  },
  "description": "Parse robot directives within HTML meta and/or HTTP headers.",
  "devDependencies": {
    "chai": "^3.5.0",
    "mocha": "^2.4.5",
    "object.assign": "^4.0.3"
  },
  "directories": {},
  "dist": {
    "shasum": "174fb1ffc2a9b97877301e87c89b395f429d1f65",
    "tarball": "https://registry.npmjs.org/robot-directives/-/robot-directives-0.3.0.tgz"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "files": [
    "lib",
    "license"
  ],
  "gitHead": "8206f3016b6f7a4a41effd5554fde7fd140111b4",
  "homepage": "https://github.com/stevenvachon/robot-directives",
  "keywords": [
    "crawlers",
    "header",
    "html",
    "http",
    "meta",
    "metadata",
    "nofollow",
    "noindex",
    "robots",
    "robots.txt",
    "seo",
    "spiders"
  ],
  "license": "MIT",
  "main": "lib",
  "maintainers": [
    {
      "name": "stevenvachon",
      "email": "contact@svachon.com"
    }
  ],
  "name": "robot-directives",
  "optionalDependencies": {},
  "readme": "# robot-directives [![NPM Version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][david-image]][david-url]\n\n> Parse robot directives within HTML meta and/or HTTP headers.\n\n* `<meta name=\"robots\" value=\"noindex,nofollow\">`\n* `X-Robots-Tag: noindex,nofollow`\n* etc\n\nNote: this library is not responsible for parsing any HTML.\n\n\n## Installation\n\n[Node.js](http://nodejs.org/) `>= 0.10` is required; `< 4.0` will need an `Object.assign` polyfill. To install, type this at the command line:\n```shell\nnpm install robot-directives\n```\n\n## Usage\n```js\nvar RobotDirectives = require(\"robot-directives\");\n\nvar instance = new RobotDirectives(options);\n\ninstance.header(\"googlebot: noindex\");\ninstance.meta(\"bingbot\", \"unavailable_after: 1-Jan-3000 00:00:00 EST\");\ninstance.meta(\"robots\", \"noarchive,nocache,nofollow\");\n\ninstance.is(RobotDirectives.NOFOLLOW);\n//=> true\n\ninstance.is([ RobotDirectives.NOFOLLOW, RobotDirectives.FOLLOW ]);\n//=> false\n\ninstance.isNot([ RobotDirectives.ARCHIVE, RobotDirectives.FOLLOW ]);\n//=> true\n\ninstance.is(RobotDirectives.NOINDEX, {\n\tcurrentTime: function(){ return new Date(\"jan 1 3001\").getTime() },\n\tuserAgent: \"Bingbot/2.0\"\n});\n//=> true\n\nRobotDirectives.isBot(\"googlebot\");\n//=> true\n```\n\n\n## Constants\nDirectives for use in comparison (and avoiding typos).\n* `RobotDirectives.ALL`\n* `RobotDirectives.ARCHIVE`\n* `RobotDirectives.CACHE`\n* `RobotDirectives.FOLLOW`\n* `RobotDirectives.IMAGEINDEX`\n* `RobotDirectives.INDEX`\n* `RobotDirectives.NOARCHIVE`\n* `RobotDirectives.NOCACHE`\n* `RobotDirectives.NOFOLLOW`\n* `RobotDirectives.NOIMAGEINDEX`\n* `RobotDirectives.NOINDEX`\n* `RobotDirectives.NONE`\n* `RobotDirectives.NOODP`\n* `RobotDirectives.NOSNIPPET`\n* `RobotDirectives.NOTRANSLATE`\n* `RobotDirectives.ODP`\n* `RobotDirectives.SNIPPET`\n* `RobotDirectives.TRANSLATE`\n\n\n## Methods\n\n### `.header(value)`\nParses, stores and cascades the value of an `X-Robots-Tag` HTTP header.\n\n### `.is(directive[, options])`\nValidates a directive or a list of directives against parsed instructions. `directive` can be a `String` or an `Array`. `options`, if defined, will override any such defined in the constructor during instantiation. A value of `true` is returned if all directives are valid.\n\n### `.isNot(directive[, options])`\nInversion of `is()`. A value of `true` is returned if all directives are *not* valid.\n\n### `.meta(name, content)`\nParses, stores and cascades the data within a `<meta>` HTML element.\n\n### `.oneIs(directives[, options])`\nA variation of `.is()`. A value of `true` is returned if at least one directive is valid.\n\n### `.oneIsNot(directives[, options])`\nInversion of `oneIs()`. A value of `true` is returned if at least one directive is *not* valid.\n\n\n## Functions\n\n### `isBot(botname)`\nReturns `true` if `botname` is a valid bot/crawler/spider name or user-agent.\n\n\n## Options\n\n### `options.allIsReadonly`\nType: `Boolean`  \nDefault value: `true`  \nDeclaring the `\"all\"` directive will not affect other directives when `true`. This is how most search crawlers perform.\n\n### `options.currentTime`\nType: `Function`  \nDefault value: `function(){ return Date.now() }`  \nThe date to use when checking if `unavailable_after` has expired.\n\n### `options.restrictive`\nType: `Boolean`  \nDefault value: `true`  \nDirective conflicts will be resolved by selecting the most restrictive value. Example: `\"noindex,index\"` will resolve to `\"noindex\"` because it is more restrictive. This is how Googlebot behaves, but others may differ.\n\n### `options.userAgent`\nType: `String`  \nDefault value: `\"\"`  \nThe HTTP user-agent to use when retrieving instructions via `is()` and `isNot()`.\n\n\n[npm-image]: https://img.shields.io/npm/v/robot-directives.svg\n[npm-url]: https://npmjs.org/package/robot-directives\n[travis-image]: https://img.shields.io/travis/stevenvachon/robot-directives.svg\n[travis-url]: https://travis-ci.org/stevenvachon/robot-directives\n[david-image]: https://img.shields.io/david/stevenvachon/robot-directives.svg\n[david-url]: https://david-dm.org/stevenvachon/robot-directives\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/stevenvachon/robot-directives.git"
  },
  "scripts": {
    "test": "mocha test.js --reporter spec --check-leaks --bail"
  },
  "version": "0.3.0"
}
