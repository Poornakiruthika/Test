{
  "_args": [
    [
      {
        "raw": "excel-as-json",
        "scope": null,
        "escapedName": "excel-as-json",
        "name": "excel-as-json",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\dev\\nightwatch\\node_modules\\nightwatch"
    ]
  ],
  "_from": "excel-as-json@latest",
  "_id": "excel-as-json@2.0.1",
  "_inCache": true,
  "_location": "/excel-as-json",
  "_nodeVersion": "7.9.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/excel-as-json-2.0.1.tgz_1494051319176_0.5786012730095536"
  },
  "_npmUser": {
    "name": "starver",
    "email": "steve.tarver@gmail.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "excel-as-json",
    "scope": null,
    "escapedName": "excel-as-json",
    "name": "excel-as-json",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/excel-as-json/-/excel-as-json-2.0.1.tgz",
  "_shasum": "131505a39c77cbb668cbe8fe9995375a72dc5218",
  "_shrinkwrap": null,
  "_spec": "excel-as-json",
  "_where": "D:\\dev\\nightwatch\\node_modules\\nightwatch",
  "author": {
    "name": "Steve Tarver",
    "email": "steve.tarver@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/stevetarver/excel-as-json/issues"
  },
  "dependencies": {
    "excel": "0.1.7"
  },
  "description": "Convert Excel data to JSON",
  "devDependencies": {
    "chai": "3.5.0",
    "codecov.io": "0.1.6",
    "coffee-coverage": "1.0.1",
    "coffee-script": "1.10.0",
    "coveralls": "2.11.9",
    "istanbul": "0.4.3",
    "mocha": "2.5.3"
  },
  "directories": {},
  "dist": {
    "shasum": "131505a39c77cbb668cbe8fe9995375a72dc5218",
    "tarball": "https://registry.npmjs.org/excel-as-json/-/excel-as-json-2.0.1.tgz"
  },
  "gitHead": "a8ee60e2dfb98f5ed87e8785b11333af88bb31df",
  "homepage": "https://github.com/stevetarver/excel-as-json",
  "keywords": [
    "Excel",
    "JSON",
    "convert"
  ],
  "license": "MIT",
  "main": "lib/excel-as-json.js",
  "maintainers": [
    {
      "name": "starver",
      "email": "steve.tarver@gmail.com"
    }
  ],
  "name": "excel-as-json",
  "optionalDependencies": {},
  "readme": "[![tag:?](https://img.shields.io/github/tag/stevetarver/excel-as-json.svg)](https://github.com/stevetarver/excel-as-json/releases)\n[![license:mit](https://img.shields.io/badge/license-mit-green.svg)](#license)\n[![build:?](https://img.shields.io/travis/stevetarver/excel-as-json/master.svg)](https://travis-ci.org/stevetarver/excel-as-json)\n[![coverage:?](https://img.shields.io/coveralls/stevetarver/excel-as-json/master.svg?style=flat-square)](https://coveralls.io/r/stevetarver/excel-as-json)\n[![codecov.io](http://codecov.io/github/stevetarver/excel-as-json/coverage.svg?branch=master)](http://codecov.io/github/stevetarver/excel-as-json?branch=master)\n<br>\n[![npm:](https://img.shields.io/npm/v/excel-as-json.svg)](https://www.npmjs.com/package/excel-as-json)\n[![dependencies:?](https://img.shields.io/david/stevetarver/excel-as-json.svg)](https://david-dm.org/stevetarver/excel-as-json.svg)\n[![devDependency Status](https://david-dm.org/stevetarver/excel-as-json/dev-status.svg)](https://david-dm.org/stevetarver/excel-as-json#info=devDependencies)\n\n\n# Convert Excel Files to JSON\n\n## What\n\nParse Excel xlsx files into a list of javascript objects and optionally write that list as a JSON encoded file.\n\nYou may organize Excel data by columns or rows where the first column or row contains object key names and the remaining columns/rows contain object values.\n\nExpected use is offline translation of Excel data to JSON files, although\nall methods are exported for other uses.\n\n## Install\n\n```$ npm install excel-as-json --save-dev```\n\n## Use\n\n```js\nconvertExcel = require('excel-as-json').processFile;\nconvertExcel(src, dst, options, callback);\n```\n\n* src: path to source Excel file (xlsx only)\n* dst: path to destination JSON file. If null, simply return the parsed object tree\n* options: an object containing \n    * sheet: 1 based sheet index as text - default '1' \n    * isColOriented: are object values in columns with keys in column A - default false\n    * omitEmptyFields: omit empty Excel fields from JSON output - default false\n* callback(err, data): callback for completion notification\n\n**NOTE** If options are not specified, defaults are used.\n\nWith these arguments, you can:\n\n* convertExcel(src, dst) <br/>\n  will write a row oriented xlsx sheet 1 to `dst` as JSON with no notification\n* convertExcel(src, dst, {isColOriented: true}) <br/>\n  will write a col oriented xlsx sheet 1 to file with no notification\n* convertExcel(src, dst, {isColOriented: true}, callback) <br/>\n  will write a col oriented xlsx to file and notify with errors and parsed data\n* convertExcel(src, null, null, callback) <br/>\n  will parse a row oriented xslx using default options and return errors and the parsed data in the callback\n\nConvert a row/col oriented Excel file to JSON as a development task and\nlog errors:\n\n```CoffeeScript\nconvertExcel = require('excel-as-json').processFile\n\noptions = \n    sheet:'1'\n    isColOriented: false\n    omitEmtpyFields: false\n\nconvertExcel 'row.xlsx', 'row.json', options, (err, data) ->\n\tif err then console.log \"JSON conversion failure: #{err}\"\n\noptions = \n    sheet:'1'\n    isColOriented: true\n    omitEmtpyFields: false\n\nconvertExcel 'col.xlsx', 'col.json', options, (err, data) ->\n\tif err then console.log \"JSON conversion failure: #{err}\"\n```\n\nConvert Excel file to an object tree and use that tree. Note that \nproperly formatted data will convert to the same object tree whether\nrow or column oriented.\n\n```CoffeeScript\nconvertExcel = require('excel-as-json').processFile\n\nconvertExcel 'row.xlsx', undefined, undefined, (err, data) ->\n\tif err throw err\n\tdoSomethingInteresting data\n\t\nconvertExcel 'col.xlsx', undefined, {isColOriented: true}, (err, data) ->\n\tif err throw err\n\tdoSomethingInteresting data\n```\n\n### Why?\n\n* Your application serves static data obtained as Excel reports from\n  another application\n* Whoever manages your static data finds Excel more pleasant than editing JSON\n* Your data is the result of calculations or formatting that is\n  more simply done in Excel\n  \n### What's the challenge?\n\nExcel stores tabular data. Converting that to JSON using only\na couple of assumptions is straight-forward. Most interesting\nJSON contains nested lists and objects. How do you map a\nflat data square that is easy for anyone to edit into these \nnested lists and objects?\n\n### Solving the challenge\n\n- Use a key row to name JSON keys\n- Allow data to be stored in row or column orientation.\n- Use javascript notation for keys and arrays\n  - Allow dotted key path notation\n  - Allow arrays of objects and literals\n\n### Excel Data\n\nWhat is the easiest way to organize and edit your Excel data? Lists of \nsimple objects seem a natural fit for a row oriented sheets. Single objects\nwith more complex structure seem more naturally presented as column\noriented sheets. Doesn't really matter which orientation you use, the\nmodule allows you to speciy a row or column orientation; basically, where\nyour keys are located: row 0 or column 0.\n\nKeys and values:\n\n* Row or column 0 contains JSON key paths\n* Remaining rows/columns contain values for those keys\n* Multiple value rows/columns represent multiple objects stored as a list\n* Within an object, lists of objects have keys like phones[1].type \n* Within an object, flat lists have keys like aliases[]\n\n### Examples\n\nA simple, row oriented key\n\n|firstName\n|---------\n| Jihad\t\n\nproduces\n\n```\n[{\n  \"firstName\": \"Jihad\"\n}]\n```\n\nA dotted key name looks like\n\n| address.street\n|---\n| 12 Beaver Court\n\nand produces\n\n```\n[{\n  \"address\": {\n    \"street\": \"12 Beaver Court\"\n    }\n}]\n```\n\nAn indexed array key name looks like\n\n|phones[0].number \n|---\n|123.456.7890\n\nand produces \n\n```\n[{\n  \"phones\": [{\n      \"number\": \"123.456.7890\"\n    }]\n}]\n```\n\nAn embedded array key name looks like this and has ';' delimited values\n\n| aliases[]\n|---\n| stormagedden;bob\n\nand produces\n\n```\n[{\n  \"aliases\": [\n    \"stormagedden\",\n    \"bob\"\n  ]\n}]\n```\n\nA more complete row oriented example\n\n|firstName| lastName | address.street  | address.city|address.state|address.zip |\n|---------|----------|-----------------|-------------|-------------|------------|\n| Jihad\t| Saladin  | 12 Beaver Court | Snowmass    | CO          | 81615      |\n| Marcus  | Rivapoli | 16 Vail Rd      | Vail        | CO          | 81657      |\n\nwould produce\n\n```JSON\n[{\n    \"firstName\": \"Jihad\",\n    \"lastName\": \"Saladin\",\n    \"address\": {\n      \"street\": \"12 Beaver Court\",\n      \"city\": \"Snowmass\",\n      \"state\": \"CO\",\n      \"zip\": \"81615\"\n    }\n  },\n  {\n    \"firstName\": \"Marcus\",\n    \"lastName\": \"Rivapoli\",\n    \"address\": {\n      \"street\": \"16 Vail Rd\",\n      \"city\": \"Vail\",\n      \"state\": \"CO\",\n      \"zip\": \"81657\"\n    }\n  }]\n```\n\nYou can do something similar in column oriented sheets. Note that indexed \nand flat arrays are added.\n\n|firstName | Jihad | Marcus |\n| :--- | :--- | :--- |\n|**lastName** | Saladin | Rivapoli |\n|**address.street** |12 Beaver Court | 16 Vail Rd\n|**address.city** | Snowmass | Vail\n|**address.state** | CO | CO\n|**address.zip**| 81615 | 81657\n|**phones[0].type**| home | home\n|**phones[0].number** |123.456.7890 | 123.456.7891\n|**phones[1].type**| work | work\n|**phones[1].number** | 098.765.4321 | 098.765.4322\n|**aliases[]** | stormagedden;bob | mac;markie\n\nwould produce\n\n```\n[\n  {\n    \"firstName\": \"Jihad\",\n    \"lastName\": \"Saladin\",\n    \"address\": {\n      \"street\": \"12 Beaver Court\",\n      \"city\": \"Snowmass\",\n      \"state\": \"CO\",\n      \"zip\": \"81615\"\n    },\n    \"phones\": [\n      {\n        \"type\": \"home\",\n        \"number\": \"123.456.7890\"\n      },\n      {\n        \"type\": \"work\",\n        \"number\": \"098.765.4321\"\n      }\n    ],\n    \"aliases\": [\n      \"stormagedden\",\n      \"bob\"\n    ]\n  },\n  {\n    \"firstName\": \"Marcus\",\n    \"lastName\": \"Rivapoli\",\n    \"address\": {\n      \"street\": \"16 Vail Rd\",\n      \"city\": \"Vail\",\n      \"state\": \"CO\",\n      \"zip\": \"81657\"\n    },\n    \"phones\": [\n      {\n        \"type\": \"home\",\n        \"number\": \"123.456.7891\"\n      },\n      {\n        \"type\": \"work\",\n        \"number\": \"098.765.4322\"\n      }\n    ],\n    \"aliases\": [\n      \"mac\",\n      \"markie\"\n    ]\n  }\n]\n```\n## Data Conversions\n\nAll values from the 'excel' package are returned as text. This module detects numbers and booleans and converts them to javascript types. Booleans must be text 'true' or 'false'. Excel FALSE and TRUE are provided \nfrom 'excel' as 0 and 1 - just too confusing.\n\n## Caveats\n\nDuring install (mac), you may see compiler warnings while installing the\nexcel dependency - although questionable, they appear to be benign.\n\n\n## TODO\n\n- provide processSync - using 'async' module\n- Detect and convert dates\n- Make 1 column values a single object?\n\n\n## Change History\n\n### 2.0.1\n- Fix creating missing destination directories to complete prior to writing file\n\n\n### 2.0.0\n\n- **Breaking changes to most function signatures**\n- Replace single option `isColOriented` with an options object to try to stabilize the processFile signature allowing future non-breaking feature additions.\n- Add `sheet` option to specify a 1-based index into the Excel sheet collection - all of your data in a single Excel workbook.\n- Add `omitEmptyFields` option that removes an object key-value if the corresponding Excel cell is empty.\n\n\n### 1.0.0\n\n- Changed process() to processFile() to avoid name collision with node's process object\n- Automatically convert text numbers and booleans to native values\n- Create destination directory if it does not exist\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/stevetarver/excel-as-json.git"
  },
  "scripts": {
    "build": "tools/build.sh",
    "clean": "tools/clean.sh",
    "codecov": "cat ./coverage/lcov.info | ./node_modules/.bin/codecov",
    "coveralls": "cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
    "dist": "tools/dist.sh",
    "prepublish": "tools/dist.sh",
    "test": "tools/test.sh"
  },
  "version": "2.0.1"
}
